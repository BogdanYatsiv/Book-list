// <auto-generated />
using System;
using BookLib;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace BookLib.Migrations
{
    [DbContext(typeof(BookLibContext))]
    partial class BookLibContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.9");

            modelBuilder.Entity("BookLib.Entities.Book", b =>
                {
                    b.Property<int>("BookId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("BookAddedAt")
                        .HasColumnType("DATE");

                    b.Property<string>("BookName")
                        .IsRequired()
                        .HasColumnType("VARCHAR");

                    b.Property<int>("NumberOfPages")
                        .HasColumnType("INT");

                    b.Property<int>("YearOfPublication")
                        .HasColumnType("INT");

                    b.HasKey("BookId");

                    b.ToTable("BooksTable");
                });

            modelBuilder.Entity("BookLib.Entities.Reminders", b =>
                {
                    b.Property<int>("ReminderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("BookId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("DescriptionForReminder")
                        .HasColumnName("Description")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ReminderDate")
                        .HasColumnType("DATE");

                    b.Property<int>("ReminderStatus")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ReminderId");

                    b.HasIndex("BookId");

                    b.HasIndex("UserId");

                    b.ToTable("ReminderTable");
                });

            modelBuilder.Entity("BookLib.Entities.Reviews", b =>
                {
                    b.Property<int>("ReviewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("BookId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("ReviewDate")
                        .HasColumnType("DATE");

                    b.Property<string>("ReviewText")
                        .HasColumnName("Review")
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ReviewId");

                    b.HasIndex("BookId");

                    b.HasIndex("UserId");

                    b.ToTable("ReviewsTable");
                });

            modelBuilder.Entity("BookLib.Entities.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("AccountCreatedAt")
                        .HasColumnType("DATE");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("VARCHAR");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("VARCHAR")
                        .HasMaxLength(30);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("VARCHAR")
                        .HasMaxLength(30);

                    b.HasKey("UserId");

                    b.ToTable("UsersTable");
                });

            modelBuilder.Entity("BookLib.Entities.UserBooks", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("BookId")
                        .HasColumnType("INTEGER");

                    b.HasKey("UserId");

                    b.HasIndex("BookId");

                    b.ToTable("IntermediateUserBookTable");
                });

            modelBuilder.Entity("BookLib.Entities.Reminders", b =>
                {
                    b.HasOne("BookLib.Entities.Book", "Book")
                        .WithMany()
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookLib.Entities.User", "User")
                        .WithMany("UserReminders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BookLib.Entities.Reviews", b =>
                {
                    b.HasOne("BookLib.Entities.Book", "Book")
                        .WithMany()
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookLib.Entities.User", "User")
                        .WithMany("UserReviews")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BookLib.Entities.UserBooks", b =>
                {
                    b.HasOne("BookLib.Entities.Book", "Book")
                        .WithMany("UserBooks")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookLib.Entities.User", "User")
                        .WithMany("UserBooks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
